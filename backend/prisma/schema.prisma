// Database schema for multi-user Safe LLM Lab with security features
// This schema defines the database structure for the Safe LLM Lab platform

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User roles for access control
/// These roles define what actions users can perform in the system
enum UserRole {
  admin       @map("admin")      // Full system access
  researcher  @map("researcher") // Can create and manage studies
  analyst     @map("analyst")    // Can analyze study data
  viewer      @map("viewer")     // Read-only access
}

/// Roles for study collaboration
/// Defines permissions within a specific study
enum CollaborationRole {
  OWNER       @map("owner")       // Full control over the study
  EDITOR      @map("editor")      // Can edit study content and settings
  CONTRIBUTOR @map("contributor") // Can add test sessions and templates
  VIEWER      @map("viewer")      // Read-only access to the study
}

/// Status of a study
enum StudyStatus {
  DRAFT       @map("draft")      // Initial state, not yet active
  PLANNING    @map("planning")   // In planning phase
  ACTIVE      @map("active")     // Currently active and collecting data
  PAUSED      @map("paused")     // Temporarily paused
  COMPLETED   @map("completed")  // Study is complete
  ARCHIVED    @map("archived")   // Archived for reference
}

/// Risk level classification
enum RiskLevel {
  LOW       @map("low")      // Minimal risk
  MEDIUM    @map("medium")   // Moderate risk
  HIGH      @map("high")     // Significant risk
  CRITICAL  @map("critical") // Critical risk - requires immediate attention
}

/// Types of security events that are logged
enum SecurityEventType {
  LOGIN                 @map("login")
  LOGOUT                @map("logout")
  FAILED_LOGIN          @map("failed_login")
  PASSWORD_CHANGE       @map("password_change")
  MFA_ENABLED          @map("mfa_enabled")
  MFA_DISABLED         @map("mfa_disabled")
  PERMISSION_CHANGE     @map("permission_change")
  DATA_ACCESS           @map("data_access")
  SUSPICIOUS_ACTIVITY   @map("suspicious_activity")
  RATE_LIMIT_EXCEEDED   @map("rate_limit_exceeded")
  CSRF_VIOLATION        @map("csrf_violation")
}

/// Severity levels for security events
enum Severity {
  LOW       @map("low")
  MEDIUM    @map("medium")
  HIGH      @map("high")
  CRITICAL  @map("critical")
}

/// User account information and authentication details
model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  name                 String
  role                 UserRole  @default(RESEARCHER)
  passwordHash         String
  mfaSecret            String?
  mfaEnabled           Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLogin            DateTime?
  failedLoginAttempts  Int       @default(0)
  lockedUntil          DateTime?
  isActive             Boolean   @default(true)
  
  // Relationships
  ownedStudies         Study[]   @relation("StudyOwner")
  collaborations       StudyCollaborator[]
  testSessions         TestSession[]
  promptTemplates      PromptTemplate[]
  securityEvents       SecurityAuditLog[]
  sessions             Session[]
  sentInvites          UserInvite[] @relation("InviteSender")
  encryptionKeys       DataEncryption[]
  
  @@map("users")
}

model Study {
  id          String      @id @default(uuid())
  name        String
  description String
  objectives  String[]
  tags        String[]
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  
  // JSON metadata
  totalTests     Int      @default(0)
  totalPrompts   Int      @default(0)
  lastActivity   DateTime @default(now())
  status         StudyStatus @default(PLANNING)
  
  // Relationships
  owner          User     @relation("StudyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators  StudyCollaborator[]
  testSessions   TestSession[]
  promptTemplates PromptTemplate[]
  invites        UserInvite[]
  
  @@map("studies")
}

model StudyCollaborator {
  id          String           @id @default(uuid())
  studyId     String
  userId      String
  role        CollaborationRole
  joinedAt    DateTime         @default(now())
  invitedBy   String
  permissions String[]
  
  // Relationships
  study       Study            @relation(fields: [studyId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([studyId, userId])
  @@map("study_collaborators")
}

model TestSession {
  id               String    @id @default(uuid())
  studyId          String
  userId           String
  modelName        String
  promptTemplate   String
  promptTemplateId String?
  prompt           String
  response         String
  classification   String
  notes            String
  timestamp        DateTime  @default(now())
  riskLevel        RiskLevel
  encryptedData    String?   // For sensitive data
  
  // Relationships
  study            Study     @relation(fields: [studyId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("test_sessions")
}

model PromptTemplate {
  id            String   @id @default(uuid())
  title         String
  content       String
  riskLevel     String
  variables     String[]
  category      String
  shots         Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  studyId       String
  isShared      Boolean  @default(false)
  usageCount    Int      @default(0)
  derivedFrom   String?
  usedInStudies String[]
  
  // Relationships
  creator       User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  study         Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  
  @@map("prompt_templates")
}

model SecurityAuditLog {
  id           String            @id @default(uuid())
  userId       String?
  action       String
  resourceType String
  resourceId   String?
  ipAddress    String
  userAgent    String
  success      Boolean
  details      Json?
  timestamp    DateTime          @default(now())
  severity     Severity
  hash         String            // For tamper detection
  
  // Relationships
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("security_audit_log")
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  ipAddress    String
  userAgent    String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  isActive     Boolean  @default(true)
  
  // Relationships
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model UserInvite {
  id        String    @id @default(uuid())
  email     String
  role      String
  studyId   String?
  invitedBy String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  // Relationships
  inviter   User      @relation("InviteSender", fields: [invitedBy], references: [id], onDelete: Cascade)
  study     Study?    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  
  @@map("user_invites")
}

model DataEncryption {
  id        String    @id @default(uuid())
  userId    String
  keyId     String
  algorithm String
  createdAt DateTime  @default(now())
  rotatedAt DateTime?
  isActive  Boolean   @default(true)
  
  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("data_encryption")
}
